What is difference between Collection and Collections class in java
The Collection interface provides a standard set of methods for managing a group of objects, known as a collection. Some common examples of classes that implement the Collection interface include ArrayList, LinkedList, and HashSet.

On the other hand, the Collections class is a utility class that contains a number of static methods for working with collections. Some of the methods in the Collections class allow you to sort, search, and manipulate collections in various ways. For example, you can use the sort method to sort the elements in a list, or the reverse method to reverse the order of the elements in a list.


Why we need collection interface?
The Collection interface in Java is the root interface for all the collections in the Java Collection Framework. It provides a set of methods that all collections should implement, such as add(), remove(), and contains(). These methods allow collections to be used in a consistent manner, regardless of the specific implementation of the collection. 
For example, a List collection can be used to store a list of strings, and then you can use the list's add method to add new strings to the list, or its contains method to check if a particular string is in the list.


Why we need collections class?
The Collections class, provides utility methods that are commonly used when working with collections. These methods can make it easier to perform operations on collections, such as sorting or searching. For example, you can use the sort method in the Collections class to sort a List, or the binarySearch method to search for a specific element in a List.


What is Wrapper Class?
A wrapper class is a class in Java that encapsulates a primitive data type. This allows you to treat primitive data types like objects, which can be useful in certain situations.