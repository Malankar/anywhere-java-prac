What are access modifiers?
Access modifiers are keywords that regulate access to different parts of our code.
It determines till where you code will be accessible by other classes means inside a class or inside the package and so on.
Java has four access modifiers they are as follows 
Private, Default, Protected and Public 

Why are access modifiers used?
Consider me as an object of Children class so some of my belonging are used by me only no one else can use them eg my shirt or trouser but if I own a car it can be used or accessed by my relative, family members or friends. Similar to how you set a level of access to your possessions, Java controls access, too. You want to define the access level for variables, methods, and classes, depending on which other classes you want accessing them.

Private 
Private is the most restrictive access modifier. It limits the visibility of data and methods to within a single class. 

Eg. Take a cat class it has variables like name, age and weight. If these variables are made public then any instance of the class in any class can change them. Suppose a new programmer comes in and changes the cat age to 50 that would cause bugs in the program. Inorder to prevent this we can make the variables private and then access them using getters and setters. Getters and setters give more control over our variables like making change while conditions are true or throwing an error instead.

Eg. 2: When we want to fetch data from an api so the api data will be json and we have to convert it into a string format and then store in an array. To achieve this we will write several methods in our class file like getData to get the data one function connect to the api then another function to convert these data into string format and store  it an array and give back to us. So while performing this whole process if we just create helper methods to be public they can be accessible by the objects instance and the new programmer would be confused what he has to use. So inorder to prevent that we can make the helper methods private and make the getData method only default or public so that the complexity of how the data is delivered to certain classes will not be taken into consideration.


Protected
Fields and methods marked by the protected access modifier will be visible:
within all classes included in the same package as ours;
within all classes that inherit our class.

Eg.: Image a SecretAgent class that represents a secret agent in some intelligence service,  as well as a top_secret package that contains this class and its descendants such as FBISecretAgent, MI6SecretAgent etc.
Inside the SecretAgent class, we want to implement an agent counter. It will increase when a new agent is created somewhere in the program.
But our agents are secret! This means that they and no one else should know how many of them exist. 
We can add the protected modifier to the agent_counter field. Then instances of other secret agent classes and other classes located in that top_secret package can get its value.


Default
Default modifier, also known as the package visible modifier. It's not indicated by a keyword, since Java applies it by default to all fields and methods. 
If you write int x=10 then x varaible will be visible only throughout the package.

Eg: Imagine that we have a 'services' package. It contains various classes that work with a database. For example, there's a UserService class that reads user data from the database, a CarService class that reads car data from the same database, and other classes, each of which works with specific types of objects and reads corresponding data from the database.
But if the data in the database is in one format and we need it in another. 
Imagine that users' birthdates in the database is stored as <TIMESTAMP WITH TIME ZONE>
and instead we need the simplest format ddmmyy
To solve this problem, inside the services package, we can create a special Mapper class. It will be responsible for converting data from the database into our familiar format. We declare our helper class simply as class Mapper. This class is now only visible inside the package and can be used by Userservices and Carservices.

Public
Anything with public modifier can be accessible is any class of any package. 

Eg. Suppose we have written a translator program that can translate Russian text into English. 
And so we want our whole app to use it we can use the public modifier.

Quick example
Lets take a TV example, private is for all processes that occur inside a TV, but public is for the buttons on the remote control used to manage the TV. What's more, the user doesn't need to know how the television is built or how it works. The remote control is the set of public-methods: on(), off(), nextChannel(), previousChannel(), increaseVolume(), decreaseVolume() etc.

Scope while inheriting methods with access modifiers?
Overridden method can have a different access modifier but it cannot lower the access scope.
Eg. 
Methods declared public in a superclass also must be public in all subclasses.
Methods declared protected in a superclass must either be protected or public in subclasses; they cannot be private.
Methods declared private are not inherited at all, so there is no rule for them.