What is an Exception ?
An exception is generally an unwanted event that interrupts the normal flow of your program. 
It can occur for various reasons say-
A user has entered an invalid data
File not found
A network connection has been lost in the middle of communications
The JVM has run out of a memory
etc.
Exception handling in Java is a mechanism for handling runtime errors that may arise during the execution of a program.

What is Exceptions Hierarchy ?
All exception and error types are subclasses of class Throwable, which is the base class of hierarchy. One branch is headed by Error which occurs at run-time and other by Exception that can happen either at compile time or run-time.

What is difference between exception and error?
Error is used by the Java run-time system (JVM) to indicate errors that are associated with the run-time environment (JRE). StackOverflowError is an example of such an error. Whereas Exception is used for exceptional conditions that user programs should catch. NullPointerException is an example of such an exception.

Types of Exception?
We have two types of exception Checked and Unchecked.
Checked Exception
A checked exception is an exception that occurs at the compile time, these are also called as compile time exceptions.
For example, if you use FileReader class in your program to read data from a file, if the file specified in its constructor doesn't exist, then a FileNotFoundException occurs, and the compiler prompts the programmer to handle the exception.

Unchecked Exception
An unchecked exception is an exception that occurs at the time of execution. These are also called as Runtime Exceptions. These include programming bugs, such as logic errors or improper use of an API. Runtime exceptions are ignored at the time of compilation.
For example, if you have declared an array of size 5 in your program, and trying to call the 6th element of the array then an ArrayIndexOutOfBoundsExceptionexception occurs.


What if we dont handle the exception?
When an exception occurs, and if you donâ€™t handle it, the program will terminate abruptly.

How to handle exceptions in Java?  
We can use try catch blocks or throw and throws keywords for handling the exceptions.

Why would we need a finally block?
Suppose you are making a database call and either it fails or succeds you want to close the database connection we can do that using the finally block.


throw and throws keyword in java ?
The throw keyword in Java is used to explicitly throw an exception. This is typically done when a specific condition is met, and the program needs to interrupt its normal flow of execution to handle the exception.

For example, if a program is reading from a file and the file is not found, the program may throw a FileNotFoundException. This would cause the program to stop executing the current code and transfer control to the catch block where the exception can be handled.

The throws keyword, on the other hand, is used to indicate that a method may throw an exception. This is typically used in the method signature to let the caller of the method know that they need to handle the potential exception.

For example, a method that reads from a file may have a signature like this:

readFile(String fileName) throws FileNotFoundException

This tells the caller that they need to handle the possibility of a FileNotFoundException being thrown by the method. If the caller does not handle the exception, it will be propagated up the call stack until it is caught by another method or the program terminates.

why we propogate exception in java?
We propagate exceptions in Java to allow the error to be handled at a higher level in the program. This is important because it allows the program to continue running smoothly and avoid crashing.
When an exception is thrown, the current method stops executing and control is transferred to the catch block. If the catch block is not able to handle the exception, it can be propagated up the call stack to the caller of the method. This allows the error to be handled by a method that has the necessary information and resources to deal with it.
Propagating exceptions also allows for a more organized and structured approach to handling errors. Instead of having each method handle its own exceptions, the exceptions can be handled at a higher level where they can be dealt with more effectively. This also makes it easier to identify and fix errors in the code.